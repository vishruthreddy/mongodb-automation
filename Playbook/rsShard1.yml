---
# Play 1: Start MongoDB instances for rsShard1
- name: Create and start MongoD instances for rsShard1
  hosts: g1
  become: yes
  vars:
    shard_dbpath: /data/db/shard1
    shard_logpath: /var/log/mongodb/shard1.log
    shard_port: 27052
    repl_set_name: rsShard1
  tasks:
    - name: Create dbpath directory
      ansible.builtin.file:
        path: "{{ shard_dbpath }}"
        state: directory
        owner: mongodb
        group: mongodb
        mode: '0755'

    - name: Create log file
      ansible.builtin.file:
        path: "{{ shard_logpath }}"
        state: touch
        owner: mongodb
        group: mongodb
        mode: '0644'

    - name: Start mongod shard1 instance (forked, background)
      ansible.builtin.shell: |
        sudo -u mongodb mongod \
          --shardsvr \
          --replSet {{ repl_set_name }} \
          --port {{ shard_port }} \
          --dbpath {{ shard_dbpath }} \
          --bind_ip 0.0.0.0 \
          --logpath {{ shard_logpath }} \
          --logappend \
          --fork
      args:
        creates: "{{ shard_dbpath }}/mongod.lock"


# Play 2: Initiate rsShard1 from n2
- name: Initiate rsShard1 replica set
  hosts: n2
  become: yes
  vars:
    shard_port: 27052
    repl_set_name: rsShard1
  tasks:
    - name: Initiate rsShard1 replica set with roles (dynamic IPs)
      ansible.builtin.shell: |
        mongosh --host localhost --port {{ shard_port }} <<'JS'
        rs.initiate({
          _id: "{{ repl_set_name }}",
          members: [
            { _id: 0, host: "{{ hostvars['n2']['ansible_host'] }}:{{ shard_port }}", priority: 2 },
            { _id: 1, host: "{{ hostvars['n3']['ansible_host'] }}:{{ shard_port }}", priority: 1 },
            { _id: 2, host: "{{ hostvars['n1']['ansible_host'] }}:{{ shard_port }}", arbiterOnly: true }
          ]
        });
        JS
      args:
        executable: /bin/bash
      register: rsShard1_init

    - name: Show output of replica set initiation
      debug:
        var: rsShard1_init.stdout
